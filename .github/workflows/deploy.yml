name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" > ~/.ssh/config

      - name: Copy files to EC2
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.github' \
            --exclude 'docker-compose.dev.yml' \
            ./ ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USERNAME }}/app/

      - name: Create env file and deploy
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.AWS_EC2_USERNAME }}@${{ secrets.AWS_EC2_HOST }} '
            cd /home/${{ secrets.AWS_EC2_USERNAME }}/app && \
            echo "NODE_ENV=production" > .env.production && \
            echo "PORT=${{ secrets.PORT }}" >> .env.production && \
            echo "DATABASE_URL=postgresql://postgres:postgres@db-production:5432/todo_db?schema=public" >> .env.production && \
            echo "POSTGRES_USER=postgres" >> .env.production && \
            echo "POSTGRES_PASSWORD=postgres" >> .env.production && \
            echo "POSTGRES_DB=todo_db" >> .env.production && \
            docker compose --env-file .env.production pull && \
            docker compose --env-file .env.production up -d --build app-production db-production && \
            sleep 10 && \
            docker compose --env-file .env.production exec -T app-production npx prisma migrate deploy && \
            docker system prune -f
          '
